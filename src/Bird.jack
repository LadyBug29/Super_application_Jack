class Bird {
    field int x;
    field int y;
	field int g;
	field int velocity;
    field int acceleration;

    constructor Bird new(int y){
		let y = y;
		let x = 128;
		let g = 10;
        let velocity = 0;
        let acceleration = 0;
		do drawBirdUpWings(y);
        return this;
    }

	method int getY(){
		return y;
	}

    method void drawBirdDownWings(int location) {
		var int memAddress;
		let y = location;
		let memAddress = 16384 + (32*y) + (x/16);
		do Memory.poke(memAddress, 2016);
		do Memory.poke(memAddress+32, 2328);
		do Memory.poke(memAddress+64, 4228);
		do Memory.poke(memAddress+96, 10370);
		do Memory.poke(memAddress+128, 10370);
		do Memory.poke(memAddress+160, 8450);
		do Memory.poke(memAddress+192, 32286);
		do Memory.poke(memAddress+224, -32479);
		do Memory.poke(memAddress+256, 32401);
		do Memory.poke(memAddress+288, 16649);
		do Memory.poke(memAddress+320, 15886);
		do Memory.poke(memAddress+352, 496);
		return;
    }

    method void drawBirdUpWings(int location) {
		var int memAddress;
		let y = location;
		let memAddress = 16384 + (32*y) + (x/16);
		do Memory.poke(memAddress, 2016);
		do Memory.poke(memAddress+32, 2328);
		do Memory.poke(memAddress+64, 4238);
		do Memory.poke(memAddress+96, 10377);
		do Memory.poke(memAddress+128, 10385);
		do Memory.poke(memAddress+160, 8481);
		do Memory.poke(memAddress+192, 32286);
		do Memory.poke(memAddress+224, -32479);
		do Memory.poke(memAddress+256, 32385);
		do Memory.poke(memAddress+288, 16641);
		do Memory.poke(memAddress+320, 15882);
		do Memory.poke(memAddress+352, 496);
		return;
    }

	method void clearBird(){
		var int memAddress;
		let memAddress = 16384+(32*y) + (x/16);
		do Memory.poke(memAddress, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		return;
	}

	method void isFall(){
		var int location;
		let location = 16384 + (32*y) + (x/16);
		
		if(MathExtensions.findRemains(Memory.peek(location + 1), 2) = 1){
				do BeautifulInscription.printGameOver();
			}

		if(~(Memory.peek(location - 32) = 0)){
			do BeautifulInscription.printGameOver();
		}

		if(~(Memory.peek(location + (32*12)) = 0)){
			do BeautifulInscription.printGameOver();
		}
		return;
	}

	method void move(){
            if(Keyboard.keyPressed() = 32){
                let velocity = g / 2;
                let acceleration = 0;
            }
            if(~(Keyboard.keyPressed() = 32)){
                let acceleration = g / 10;
                let velocity = velocity - acceleration;
            } 

			do isFall();

            do clearBird();
			if(velocity < 2){
				do drawBirdUpWings(y - velocity);
			}
			if(~(velocity < 2)){
            	do drawBirdDownWings(y - velocity);
			}

            do Sys.wait(27);
        return;
	}
}